// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Admin {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
}

model Project {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  name        String
  description String?

  Services Service[]
}

model Service {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  name           String
  description    String?
  port           Int
  serviceType    String   @default("webService") // webService, database
  serviceRuntime String   @default("nodejs") // nodejs, postgres
  dockerImage    String
  dockerVersion  String

  projectId Int

  Project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  WebService WebService?
  Database   Database?
}

model WebService {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  gitHubUrl    String
  mainBranch   String
  buildCommand String
  startCommand String

  serviceId Int @unique

  EnvVars EnvVar[]
  Service Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Database {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  dbName     String
  dbUser     String
  dbPassword String

  serviceId Int @unique

  Service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model EnvVar {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  key          String
  value        String
  webServiceId Int

  WebService WebService @relation(fields: [webServiceId], references: [id], onDelete: Cascade)
}
